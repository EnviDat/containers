stages:
  - build
  - scan
  - rename
  - tag-latest
  - push-dockerhub

variables:
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  CACHE_COMPRESSION_LEVEL: "fast"
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: ""

workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always

.build:
  stage: build
  image: docker.io/docker:24
  services:
    - name: docker:24-dind
  before_script:
    - >
      echo $IMAGE_REGISTRY_PASS | docker login
      -u $IMAGE_REGISTRY_USER
      --password-stdin
      $INTERNAL_REG
    - docker buildx create --use
  script:
    - >
      docker buildx build "${CONTEXT_DIR}"
      --push
      --platform linux/arm64/v8,linux/amd64
      --tag "${IMAGE_NAME}-unverified"
      --build-arg MAINTAINER=${MAINTAINER}
      --build-arg EXTERNAL_REG="${EXTERNAL_REG}"
      --build-arg BASE_IMG_TAG="${BASE_IMG_TAG}"

.scan:
  stage: scan
  image:
    name: docker.io/aquasec/trivy:0.23.0
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  script:
    - trivy --version
    - time trivy image --clear-cache
    - time trivy --cache-dir .trivycache/ image --download-db-only --no-progress
    # Create report artifact
    - >
      time trivy --cache-dir .trivycache/ image --exit-code 0 --ignore-unfixed
      --no-progress --format template --template "@/contrib/gitlab.tpl"
      --output "$CI_PROJECT_DIR/$SHORT_NAME-imgscan.json"
      "${IMAGE_NAME}-unverified"
    # Print full report
    - >
      time trivy --cache-dir .trivycache/ image --exit-code 0 --ignore-unfixed
      --no-progress "${IMAGE_NAME}"-unverified
    # Fail on critical vulnerabilities
    - >
      time trivy --cache-dir .trivycache/ image --exit-code 1 --ignore-unfixed
      --severity CRITICAL --no-progress "${IMAGE_NAME}"-unverified
  cache:
    key: trivy-cache
    paths:
      - .trivycache/
    policy: pull-push
  artifacts:
    when: always
    reports:
      container_scanning: $SHORT_NAME-imgscan.json

.retag:
  stage: rename
  image: docker.io/regclient/regctl:v0.3-alpine
  variables:
    GIT_STRATEGY: none
  before_script:
    - export REG_HOST=${INTERNAL_REG%/*}
    - >
      echo "{\"hosts\":{\"${REG_HOST}\":{\"tls\":\"enabled\",\"hostname\":
      \"${REG_HOST}\",\"user\":\"${IMAGE_REGISTRY_USER}\",\"pass\":
      \"${IMAGE_REGISTRY_PASS}\"}}}" >> /home/appuser/.regctl/config.json
  script:
    - >
      regctl --verbosity debug image copy
      "${IMAGE_NAME}-unverified" "${IMAGE_NAME}"
    - regctl --verbosity debug tag delete "${IMAGE_NAME}-unverified"

.tag-latest:
  stage: tag-latest
  image: docker.io/regclient/regctl:v0.3-alpine
  variables:
    GIT_STRATEGY: none
  before_script:
    - export REG_HOST=${INTERNAL_REG%/*}
    - >
      echo "{\"hosts\":{\"${REG_HOST}\":{\"tls\":\"enabled\",\"hostname\":
      \"${REG_HOST}\",\"user\":\"${IMAGE_REGISTRY_USER}\",\"pass\":
      \"${IMAGE_REGISTRY_PASS}\"}}}" >> /home/appuser/.regctl/config.json
  script:
    - >
      regctl --verbosity debug image copy
      "${IMAGE_NAME}:${VERSION}" "${IMAGE_NAME}:latest"

.push-dockerhub:
  stage: push-dockerhub
  image: docker.io/regclient/regctl:v0.3-alpine
  variables:
    GIT_STRATEGY: none
  before_script:
    - export REG_HOST=https://index.docker.io/v1/
    - >
      echo "{\"hosts\":{\"${REG_HOST}\":{\"tls\":\"enabled\",\"hostname\":
      \"${REG_HOST}\",\"user\":\"${DOCKERHUB_USER}\",\"pass\":
      \"${DOCKERHUB_TOKEN}\"}}}" >> /home/appuser/.regctl/config.json
  script:
    - >
      regctl --verbosity debug image copy
      "${INTERNAL_REG}/containers/${IMAGE_NAME}"
      "docker.io/envidat/${IMAGE_NAME}"

bash-build:
  extends:
    - .build
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/bash:latest"
    CONTEXT_DIR: "${CI_PROJECT_DIR}/bash"

bash-scan:
  extends:
    - .scan
  needs: ["bash-build"]
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/bash:latest"
    SHORT_NAME: "bash-latest"

bash-retag:
  extends:
    - .retag
  needs: ["bash-scan"]
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/bash:latest"

bash-dockerhub:
  extends:
    - .push-dockerhub
  needs: ["bash-retag"]
  variables:
    IMAGE_NAME: "bash:latest"

bash-geo-build:
  extends:
    - .build
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/bash:geo"
    CONTEXT_DIR: "${CI_PROJECT_DIR}/bash-geo"

bash-geo-scan:
  extends:
    - .scan
  needs: ["bash-geo-build"]
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/bash:geo"
    SHORT_NAME: "bash-geo"

bash-geo-retag:
  extends:
    - .retag
  needs: ["bash-geo-scan"]
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/bash:geo"

bash-geo-dockerhub:
  extends:
    - .push-dockerhub
  needs: ["bash-geo-retag"]
  variables:
    IMAGE_NAME: "bash:geo"

r-4-build:
  extends:
    - .build
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/r:4.2.2"
    CONTEXT_DIR: "${CI_PROJECT_DIR}/r"
    BASE_IMG_TAG: "4.2.2"

r-4-scan:
  extends:
    - .scan
  needs: ["r-4-build"]
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/r:4.2.2"
    SHORT_NAME: "r-4.2.2"

r-4-retag:
  extends:
    - .retag
  needs: ["r-4-scan"]
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/r:4.2.2"

r-4-dockerhub:
  extends:
    - .push-dockerhub
  needs: ["r-4-retag"]
  variables:
    IMAGE_NAME: "r:4.2.2"

r-4-tag-latest:
  extends:
    - .tag-latest
  needs: ["r-4-retag"]
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/r"
    VERSION: "4.2.2"

r-4-dockerhub-latest:
  extends:
    - .push-dockerhub
  needs: ["r-4-tag-latest"]
  variables:
    IMAGE_NAME: "r:latest"

python-3.9-build:
  extends:
    - .build
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/python:3.9"
    CONTEXT_DIR: "${CI_PROJECT_DIR}/python"
    BASE_IMG_TAG: "3.9-slim-bookworm"

python-3.9-scan:
  extends:
    - .scan
  needs: ["python-3.9-build"]
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/python:3.9"
    SHORT_NAME: "py3.9"

python-3.9-retag:
  extends:
    - .retag
  needs: ["python-3.9-scan"]
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/python:3.9"

python-3.9-dockerhub:
  extends:
    - .push-dockerhub
  needs: ["python-3.9-retag"]
  variables:
    IMAGE_NAME: "python:3.9"

python-3.10-build:
  extends:
    - .build
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/python:3.10"
    CONTEXT_DIR: "${CI_PROJECT_DIR}/python"
    BASE_IMG_TAG: "3.10-slim-bookworm"

python-3.10-scan:
  extends:
    - .scan
  needs: ["python-3.10-build"]
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/python:3.10"
    SHORT_NAME: "py3.10"

python-3.10-retag:
  extends:
    - .retag
  needs: ["python-3.10-scan"]
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/python:3.10"

python-3.10-dockerhub:
  extends:
    - .push-dockerhub
  needs: ["python-3.10-retag"]
  variables:
    IMAGE_NAME: "python:3.10"

python-3.11-build:
  extends:
    - .build
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/python:3.11"
    CONTEXT_DIR: "${CI_PROJECT_DIR}/python"
    BASE_IMG_TAG: "3.11-slim-bookworm"

python-3.11-scan:
  extends:
    - .scan
  needs: ["python-3.11-build"]
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/python:3.11"
    SHORT_NAME: "py3.11"

python-3.11-retag:
  extends:
    - .retag
  needs: ["python-3.11-scan"]
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/python:3.11"

python-3.11-dockerhub:
  extends:
    - .push-dockerhub
  needs: ["python-3.11-retag"]
  variables:
    IMAGE_NAME: "python:3.11"

python-3.11-tag-latest:
  extends:
    - .tag-latest
  needs: ["python-3.11-retag"]
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/python"
    VERSION: "3.11"

python-3.11-dockerhub-latest:
  extends:
    - .push-dockerhub
  needs: ["python-3.11-tag-latest"]
  variables:
    IMAGE_NAME: "python:latest"

python-3.11-geo-build:
  extends:
    - .build
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/python:3.11-geo"
    CONTEXT_DIR: "${CI_PROJECT_DIR}/python"
    BASE_IMG_TAG: "3.11-slim-bookworm"

python-3.11-geo-scan:
  extends:
    - .scan
  needs: ["python-3.11-geo-build"]
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/python:3.11-geo"
    SHORT_NAME: "py3.11-geo"

python-3.11-geo-retag:
  extends:
    - .retag
  needs: ["python-3.11-geo-scan"]
  variables:
    IMAGE_NAME: "${INTERNAL_REG}/containers/python:3.11-geo"

python-3.11-geo-dockerhub:
  extends:
    - .push-dockerhub
  needs: ["python-3.11-geo-retag"]
  variables:
    IMAGE_NAME: "python:3.11-geo"
